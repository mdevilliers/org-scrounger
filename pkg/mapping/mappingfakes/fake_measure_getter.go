// Code generated by counterfeiter. DO NOT EDIT.
package mappingfakes

import (
	"context"
	"sync"

	"github.com/mdevilliers/org-scrounger/pkg/sonarcloud"
)

type FakeMeasureGetter struct {
	GetMeasuresStub        func(context.Context, string) (*sonarcloud.MeasureResponse, error)
	getMeasuresMutex       sync.RWMutex
	getMeasuresArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getMeasuresReturns struct {
		result1 *sonarcloud.MeasureResponse
		result2 error
	}
	getMeasuresReturnsOnCall map[int]struct {
		result1 *sonarcloud.MeasureResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMeasureGetter) GetMeasures(arg1 context.Context, arg2 string) (*sonarcloud.MeasureResponse, error) {
	fake.getMeasuresMutex.Lock()
	ret, specificReturn := fake.getMeasuresReturnsOnCall[len(fake.getMeasuresArgsForCall)]
	fake.getMeasuresArgsForCall = append(fake.getMeasuresArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetMeasuresStub
	fakeReturns := fake.getMeasuresReturns
	fake.recordInvocation("GetMeasures", []interface{}{arg1, arg2})
	fake.getMeasuresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMeasureGetter) GetMeasuresCallCount() int {
	fake.getMeasuresMutex.RLock()
	defer fake.getMeasuresMutex.RUnlock()
	return len(fake.getMeasuresArgsForCall)
}

func (fake *FakeMeasureGetter) GetMeasuresCalls(stub func(context.Context, string) (*sonarcloud.MeasureResponse, error)) {
	fake.getMeasuresMutex.Lock()
	defer fake.getMeasuresMutex.Unlock()
	fake.GetMeasuresStub = stub
}

func (fake *FakeMeasureGetter) GetMeasuresArgsForCall(i int) (context.Context, string) {
	fake.getMeasuresMutex.RLock()
	defer fake.getMeasuresMutex.RUnlock()
	argsForCall := fake.getMeasuresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMeasureGetter) GetMeasuresReturns(result1 *sonarcloud.MeasureResponse, result2 error) {
	fake.getMeasuresMutex.Lock()
	defer fake.getMeasuresMutex.Unlock()
	fake.GetMeasuresStub = nil
	fake.getMeasuresReturns = struct {
		result1 *sonarcloud.MeasureResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMeasureGetter) GetMeasuresReturnsOnCall(i int, result1 *sonarcloud.MeasureResponse, result2 error) {
	fake.getMeasuresMutex.Lock()
	defer fake.getMeasuresMutex.Unlock()
	fake.GetMeasuresStub = nil
	if fake.getMeasuresReturnsOnCall == nil {
		fake.getMeasuresReturnsOnCall = make(map[int]struct {
			result1 *sonarcloud.MeasureResponse
			result2 error
		})
	}
	fake.getMeasuresReturnsOnCall[i] = struct {
		result1 *sonarcloud.MeasureResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMeasureGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMeasuresMutex.RLock()
	defer fake.getMeasuresMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMeasureGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
