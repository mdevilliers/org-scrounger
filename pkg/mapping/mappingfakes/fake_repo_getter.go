// Code generated by counterfeiter. DO NOT EDIT.
package mappingfakes

import (
	"context"
	"sync"

	"github.com/mdevilliers/org-scrounger/pkg/gh"
)

type FakeRepoGetter struct {
	GetRepoDetailsStub        func(context.Context, string, string) (gh.Repository, gh.RateLimit, error)
	getRepoDetailsMutex       sync.RWMutex
	getRepoDetailsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getRepoDetailsReturns struct {
		result1 gh.Repository
		result2 gh.RateLimit
		result3 error
	}
	getRepoDetailsReturnsOnCall map[int]struct {
		result1 gh.Repository
		result2 gh.RateLimit
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepoGetter) GetRepoDetails(arg1 context.Context, arg2 string, arg3 string) (gh.Repository, gh.RateLimit, error) {
	fake.getRepoDetailsMutex.Lock()
	ret, specificReturn := fake.getRepoDetailsReturnsOnCall[len(fake.getRepoDetailsArgsForCall)]
	fake.getRepoDetailsArgsForCall = append(fake.getRepoDetailsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetRepoDetailsStub
	fakeReturns := fake.getRepoDetailsReturns
	fake.recordInvocation("GetRepoDetails", []interface{}{arg1, arg2, arg3})
	fake.getRepoDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRepoGetter) GetRepoDetailsCallCount() int {
	fake.getRepoDetailsMutex.RLock()
	defer fake.getRepoDetailsMutex.RUnlock()
	return len(fake.getRepoDetailsArgsForCall)
}

func (fake *FakeRepoGetter) GetRepoDetailsCalls(stub func(context.Context, string, string) (gh.Repository, gh.RateLimit, error)) {
	fake.getRepoDetailsMutex.Lock()
	defer fake.getRepoDetailsMutex.Unlock()
	fake.GetRepoDetailsStub = stub
}

func (fake *FakeRepoGetter) GetRepoDetailsArgsForCall(i int) (context.Context, string, string) {

	fake.getRepoDetailsMutex.RLock()
	defer fake.getRepoDetailsMutex.RUnlock()
	argsForCall := fake.getRepoDetailsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepoGetter) GetRepoDetailsReturns(result1 gh.Repository, result2 gh.RateLimit, result3 error) {
	fake.getRepoDetailsMutex.Lock()
	defer fake.getRepoDetailsMutex.Unlock()
	fake.GetRepoDetailsStub = nil
	fake.getRepoDetailsReturns = struct {
		result1 gh.Repository
		result2 gh.RateLimit
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepoGetter) GetRepoDetailsReturnsOnCall(i int, result1 gh.Repository, result2 gh.RateLimit, result3 error) {
	fake.getRepoDetailsMutex.Lock()
	defer fake.getRepoDetailsMutex.Unlock()
	fake.GetRepoDetailsStub = nil
	if fake.getRepoDetailsReturnsOnCall == nil {
		fake.getRepoDetailsReturnsOnCall = make(map[int]struct {
			result1 gh.Repository
			result2 gh.RateLimit
			result3 error
		})
	}
	fake.getRepoDetailsReturnsOnCall[i] = struct {
		result1 gh.Repository
		result2 gh.RateLimit
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepoGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRepoDetailsMutex.RLock()
	defer fake.getRepoDetailsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepoGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
